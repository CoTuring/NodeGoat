name: Frontend Usability Analysis

on:
  workflow_dispatch:
    inputs:
      enable_lighthouse:
        description: 'Enable Lighthouse analysis'
        required: false
        default: 'true'
        type: boolean
  # Uncomment to enable automatic runs
  # push:
  #   branches: [ main, master ]
  # pull_request:
  #   branches: [ main, master ]

jobs:
  frontend-usability:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Detect Frontend Framework
      id: detect
      run: |
        has_frontend=false
        framework="none"
        
        if [ -f "package.json" ]; then
          if grep -q "react\|vue\|angular\|svelte\|next\|nuxt" package.json; then
            has_frontend=true
            if grep -q "react" package.json; then
              framework="react"
            elif grep -q "vue" package.json; then
              framework="vue"
            elif grep -q "angular" package.json; then
              framework="angular"
            elif grep -q "next" package.json; then
              framework="nextjs"
            fi
          fi
        fi
        
        # Check for HTML files
        html_files=$(find . -name "*.html" | head -5 | wc -l)
        if [ $html_files -gt 0 ]; then
          has_frontend=true
          if [ "$framework" = "none" ]; then
            framework="html"
          fi
        fi
        
        echo "has_frontend=$has_frontend" >> $GITHUB_OUTPUT
        echo "framework=$framework" >> $GITHUB_OUTPUT

    - name: Setup Node.js (if needed)
      if: steps.detect.outputs.has_frontend == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Dependencies
      if: steps.detect.outputs.has_frontend == 'true'
      run: |
        if [ -f "package.json" ]; then
          npm ci || npm install
        fi

    - name: Build Frontend (if applicable)
      if: steps.detect.outputs.has_frontend == 'true'
      run: |
        if [ -f "package.json" ]; then
          # Try common build commands
          npm run build || npm run build:prod || npm run dist || echo "No build script found"
        fi
      continue-on-error: true

    - name: Setup Static Server
      if: steps.detect.outputs.has_frontend == 'true'
      run: |
        npm install -g http-server
        
        # Determine what to serve
        if [ -d "dist" ]; then
          serve_dir="dist"
        elif [ -d "build" ]; then
          serve_dir="build"
        elif [ -d "public" ]; then
          serve_dir="public"
        else
          serve_dir="."
        fi
        
        echo "Serving directory: $serve_dir"
        http-server $serve_dir -p 8080 &
        SERVER_PID=$!
        echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
        sleep 5  # Wait for server to start

    - name: Run Lighthouse CI
      if: steps.detect.outputs.has_frontend == 'true' && (github.event.inputs.enable_lighthouse == 'true' || github.event_name != 'workflow_dispatch')
      run: |
        npm install -g @lhci/cli@0.12.x
        
        # Create Lighthouse CI config
        cat > lighthouserc.js << EOF
        module.exports = {
          ci: {
            collect: {
              url: ['http://localhost:8080'],
              numberOfRuns: 1,
            },
            upload: {
              target: 'filesystem',
              outputDir: './lighthouse-results',
            },
          },
        };
        EOF
        
        lhci collect --config=lighthouserc.js || true
      continue-on-error: true

    - name: Analyze Frontend Quality
      id: frontend_score
      run: |
        usability_score=0
        
        if [ "${{ steps.detect.outputs.has_frontend }}" = "true" ]; then
          # Try to extract Lighthouse scores
          if [ -d "lighthouse-results" ]; then
            # Find the most recent lighthouse report
            report_file=$(find lighthouse-results -name "*.json" | head -1)
            if [ -f "$report_file" ]; then
              performance=$(jq '.categories.performance.score * 100' "$report_file" 2>/dev/null || echo 0)
              accessibility=$(jq '.categories.accessibility.score * 100' "$report_file" 2>/dev/null || echo 0)
              best_practices=$(jq '.categories["best-practices"].score * 100' "$report_file" 2>/dev/null || echo 0)
              seo=$(jq '.categories.seo.score * 100' "$report_file" 2>/dev/null || echo 0)
              
              # Average the scores
              usability_score=$(echo "($performance + $accessibility + $best_practices + $seo) / 4" | bc -l 2>/dev/null || echo 0)
              usability_score=${usability_score%.*}  # Remove decimal part
            fi
          fi
          
          # Fallback scoring based on framework detection and file analysis
          if [ $usability_score -eq 0 ]; then
            case "${{ steps.detect.outputs.framework }}" in
              "react"|"vue"|"angular"|"nextjs")
                usability_score=75  # Modern frameworks get good base score
                ;;
              "html")
                usability_score=60  # Basic HTML gets moderate score
                ;;
              *)
                usability_score=50  # Unknown gets lower score
                ;;
            esac
            
            # Check for responsive design indicators
            if grep -r "viewport\|responsive\|media.*query" . --include="*.html" --include="*.css" >/dev/null 2>&1; then
              usability_score=$((usability_score + 10))
            fi
            
            # Check for accessibility features
            if grep -r "alt=\|aria-\|role=" . --include="*.html" --include="*.jsx" --include="*.vue" >/dev/null 2>&1; then
              usability_score=$((usability_score + 10))
            fi
          fi
        else
          usability_score=0  # No frontend detected
        fi
        
        echo "usability_score=$usability_score" >> $GITHUB_OUTPUT

    - name: Cleanup
      if: always()
      run: |
        if [ ! -z "$SERVER_PID" ]; then
          kill $SERVER_PID || true
        fi

    - name: Generate Frontend Usability Report
      run: |
        mkdir -p reports
        cat > reports/frontend-usability.json << EOF
        {
          "category": "frontend_usability",
          "score": ${{ steps.frontend_score.outputs.usability_score }},
          "max_score": 100,
          "details": {
            "has_frontend": ${{ steps.detect.outputs.has_frontend }},
            "framework": "${{ steps.detect.outputs.framework }}",
            "lighthouse_enabled": ${{ github.event.inputs.enable_lighthouse == 'true' || github.event_name != 'workflow_dispatch' }}
          }
        }
        EOF

    - name: Upload Frontend Usability Report
      uses: actions/upload-artifact@v4
      with:
        name: frontend-usability-report
        path: reports/frontend-usability.json
