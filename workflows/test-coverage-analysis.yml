name: Test Coverage Analysis

on:
  workflow_dispatch:
  # Uncomment to enable automatic runs
  # push:
  #   branches: [ main, master ]
  # pull_request:
  #   branches: [ main, master ]

jobs:
  test-coverage:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Detect Language and Test Framework
      id: detect
      run: |
        # Detect primary language and test setup
        if [ -f "package.json" ]; then
          echo "language=javascript" >> $GITHUB_OUTPUT
          if grep -q "jest" package.json; then
            echo "test_framework=jest" >> $GITHUB_OUTPUT
          elif grep -q "mocha" package.json; then
            echo "test_framework=mocha" >> $GITHUB_OUTPUT
          else
            echo "test_framework=unknown" >> $GITHUB_OUTPUT
          fi
        elif [ -f "requirements.txt" ] || [ -f "pyproject.toml" ]; then
          echo "language=python" >> $GITHUB_OUTPUT
          echo "test_framework=pytest" >> $GITHUB_OUTPUT
        elif [ -f "go.mod" ]; then
          echo "language=go" >> $GITHUB_OUTPUT
          echo "test_framework=go_test" >> $GITHUB_OUTPUT
        else
          echo "language=generic" >> $GITHUB_OUTPUT
          echo "test_framework=unknown" >> $GITHUB_OUTPUT
        fi

    - name: Setup Node.js (if JS/TS)
      if: steps.detect.outputs.language == 'javascript'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup Python (if Python)
      if: steps.detect.outputs.language == 'python'
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Setup Go (if Go)
      if: steps.detect.outputs.language == 'go'
      uses: actions/setup-go@v4
      with:
        go-version: '1.19'

    - name: Install Dependencies and Test Tools
      run: |
        if [ "${{ steps.detect.outputs.language }}" = "javascript" ]; then
          npm ci || npm install
        elif [ "${{ steps.detect.outputs.language }}" = "python" ]; then
          pip install pytest pytest-cov coverage
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          fi
        elif [ "${{ steps.detect.outputs.language }}" = "go" ]; then
          go mod download
        fi

    - name: Run Tests with Coverage
      id: coverage
      run: |
        coverage_percentage=0
        test_count=0
        
        if [ "${{ steps.detect.outputs.language }}" = "javascript" ]; then
          if [ "${{ steps.detect.outputs.test_framework }}" = "jest" ]; then
            npm test -- --coverage --coverageReporters=json-summary || true
            if [ -f "coverage/coverage-summary.json" ]; then
              coverage_percentage=$(jq '.total.lines.pct // 0' coverage/coverage-summary.json)
            fi
          else
            # Try running any npm test script
            npm test || true
            # Fallback coverage estimation based on test files
            test_files=$(find . -name "*.test.js" -o -name "*.spec.js" | wc -l)
            if [ $test_files -gt 0 ]; then
              coverage_percentage=60  # Assume moderate coverage if tests exist
            fi
          fi
        elif [ "${{ steps.detect.outputs.language }}" = "python" ]; then
          pytest --cov=. --cov-report=json || true
          if [ -f "coverage.json" ]; then
            coverage_percentage=$(jq '.totals.percent_covered // 0' coverage.json)
          else
            # Fallback: run tests without coverage
            pytest --tb=short || true
            test_files=$(find . -name "test_*.py" -o -name "*_test.py" | wc -l)
            if [ $test_files -gt 0 ]; then
              coverage_percentage=50
            fi
          fi
        elif [ "${{ steps.detect.outputs.language }}" = "go" ]; then
          go test -coverprofile=coverage.out -v ./... || true
          if [ -f "coverage.out" ]; then
            coverage_percentage=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          fi
        fi
        
        # Count test files as a proxy for test effort
        test_files=$(find . \( -name "*.test.*" -o -name "*_test.*" -o -name "test_*" \) | wc -l)
        
        echo "coverage_percentage=${coverage_percentage:-0}" >> $GITHUB_OUTPUT
        echo "test_files=$test_files" >> $GITHUB_OUTPUT

    - name: Generate Test Coverage Report
      run: |
        mkdir -p reports
        coverage=${{ steps.coverage.outputs.coverage_percentage }}
        test_files=${{ steps.coverage.outputs.test_files }}
        
        # Bonus points for having test files
        test_bonus=0
        if [ $test_files -gt 0 ]; then
          test_bonus=10
        fi
        
        # Calculate final score (coverage + bonus, max 100)
        final_score=$(echo "$coverage + $test_bonus" | bc -l 2>/dev/null || echo "$((${coverage%.*} + test_bonus))")
        final_score=${final_score%.*}  # Remove decimal part
        if [ $final_score -gt 100 ]; then
          final_score=100
        fi
        
        cat > reports/test-coverage.json << EOF
        {
          "category": "test_coverage",
          "score": $final_score,
          "max_score": 100,
          "details": {
            "coverage_percentage": $coverage,
            "test_files_count": $test_files,
            "language": "${{ steps.detect.outputs.language }}",
            "test_framework": "${{ steps.detect.outputs.test_framework }}"
          }
        }
        EOF

    - name: Upload Test Coverage Report
      uses: actions/upload-artifact@v4
      with:
        name: test-coverage-report
        path: reports/test-coverage.json
