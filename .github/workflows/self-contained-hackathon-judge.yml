name: üèÜ Hackathon Judge (Simplified)

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, master]
  workflow_dispatch:
    inputs:
      pr_number:
        description: "PR number to analyze (optional)"
        required: false
        type: number

permissions:
  issues: write
  pull-requests: write

env:
  NODE_VERSION: "18"
  JAVA_VERSION: "17"
  SONAR_SCANNER_VERSION: "5.0.1.3006"
  PYTHON_VERSION: "3.x"

jobs:
  hackathon-analysis:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.pull_request.head.repo.full_name != github.repository && 'hackathon-approval' || '' }}

    outputs:
      final_score: ${{ steps.calculate_score.outputs.overall_score }}
      sonar_url: ${{ steps.sonar_analysis.outputs.sonar_url }}

    steps:
      - name: üìã Extract PR Information
        id: pr_info
        shell: bash
        run: |
          cd .github/scripts

          # Install dependencies
          npm install --silent @actions/core @actions/github

          # Set environment variables for the script
          export GITHUB_CONTEXT='${{ toJson(github) }}'
          export GITHUB_EVENT_NAME='${{ github.event_name }}'
          export GITHUB_TOKEN='${{ secrets.GITHUB_TOKEN }}'

          # Run the extraction script
          node extract-pr-info.js

      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.pr_info.outputs.head_sha }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üîß Setup Development Environment
        uses: ./.github/actions/setup-env
        with:
          node-version: ${{ env.NODE_VERSION }}
          java-version: ${{ env.JAVA_VERSION }}
          python-version: ${{ env.PYTHON_VERSION }}

      - name: üîç Detect Project Stack
        id: detect_stack
        uses: ./.github/actions/detect-stack

      - name: üì¶ Install Dependencies
        uses: ./.github/actions/install-deps
        with:
          language: ${{ steps.detect_stack.outputs.language }}
          framework: ${{ steps.detect_stack.outputs.framework }}

      - name: üß™ Run Tests & Coverage
        id: test_analysis
        uses: ./.github/actions/test-coverage
        with:
          language: ${{ steps.detect_stack.outputs.language }}

      - name: üîç SonarCloud Analysis
        id: sonar_analysis
        uses: ./.github/actions/sonar-analysis
        with:
          project_key: ${{ vars.SONAR_PROJECT_KEY }}
          organization: ${{ vars.SONAR_ORGANIZATION }}
          language: ${{ steps.detect_stack.outputs.language }}
          sonar_token: ${{ secrets.SONAR_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: üîí Security Analysis
        id: security_analysis
        uses: ./.github/actions/security-scan
        with:
          language: ${{ steps.detect_stack.outputs.language }}

      - name: üé® Frontend Usability Analysis
        id: frontend_analysis
        if: steps.detect_stack.outputs.has_frontend == 'true'
        uses: ./.github/actions/frontend-audit
        with:
          framework: ${{ steps.detect_stack.outputs.framework }}

      - name: üë• Team Behavior Analysis
        id: team_analysis
        uses: ./.github/actions/team-behavior

      - name: ü§ñ AI Usage Analysis
        id: ai_analysis
        uses: ./.github/actions/ai-detection

      - name: üìä Calculate Final Score
        id: calculate_score
        uses: ./.github/actions/calculate-score
        with:
          test_score: ${{ steps.test_analysis.outputs.test_score }}
          sonar_score: ${{ steps.sonar_analysis.outputs.sonar_score }}
          security_score: ${{ steps.security_analysis.outputs.security_score }}
          frontend_score: ${{ steps.frontend_analysis.outputs.usability_score || '0' }}
          team_score: ${{ steps.team_analysis.outputs.behavior_score }}
          ai_score: ${{ steps.ai_analysis.outputs.ai_score }}

      - name: üìÅ Upload Analysis Reports
        uses: actions/upload-artifact@v4
        with:
          name: hackathon-analysis-${{ steps.pr_info.outputs.team_name }}-pr${{ steps.pr_info.outputs.pr_number }}
          path: |
            reports/
            *.json
          retention-days: 30
          if-no-files-found: ignore

      - name: üí¨ Post Results Comment
        if: github.event_name == 'pull_request'
        uses: ./.github/actions/post-comment
        with:
          overall_score: ${{ steps.calculate_score.outputs.overall_score }}
          test_score: ${{ steps.test_analysis.outputs.test_score }}
          sonar_score: ${{ steps.sonar_analysis.outputs.sonar_score }}
          sonar_url: ${{ steps.sonar_analysis.outputs.sonar_url }}
          security_score: ${{ steps.security_analysis.outputs.security_score }}
          frontend_score: ${{ steps.frontend_analysis.outputs.usability_score || '0' }}
          team_score: ${{ steps.team_analysis.outputs.behavior_score }}
          ai_score: ${{ steps.ai_analysis.outputs.ai_score }}
          detected_stack: ${{ steps.detect_stack.outputs.framework }}
          pr_number: ${{ steps.pr_info.outputs.pr_number }}
          team_name: ${{ steps.pr_info.outputs.team_name }}
          high_severity: ${{ steps.security_analysis.outputs.high_severity || '0' }}
          medium_severity: ${{ steps.security_analysis.outputs.medium_severity || '0' }}
          low_severity: ${{ steps.security_analysis.outputs.low_severity || '0' }}
          coverage_percentage: ${{ steps.test_analysis.outputs.coverage_percentage || '0' }}
          test_files: ${{ steps.test_analysis.outputs.test_files || '0' }}
          sonar_status: ${{ steps.sonar_analysis.outputs.sonar_status || 'UNKNOWN' }}
          code_smells: ${{ steps.sonar_analysis.outputs.code_smells || '0' }}
          bugs: ${{ steps.sonar_analysis.outputs.bugs || '0' }}
          vulnerabilities: ${{ steps.sonar_analysis.outputs.vulnerabilities || '0' }}
          sonar_analysis_results: ${{ steps.sonar_analysis.outputs.analysis_results || '{}' }}

      - name: üìã Job Summary
        shell: bash
        env:
          TEAM_NAME: ${{ steps.pr_info.outputs.team_name }}
          FINAL_SCORE: ${{ steps.calculate_score.outputs.overall_score }}
          DETECTED_STACK: ${{ steps.detect_stack.outputs.framework }}
          DETECTED_LANGUAGE: ${{ steps.detect_stack.outputs.language }}
          TEST_SCORE: ${{ steps.test_analysis.outputs.test_score }}
          SONAR_SCORE: ${{ steps.sonar_analysis.outputs.sonar_score }}
          SECURITY_SCORE: ${{ steps.security_analysis.outputs.security_score }}
          FRONTEND_SCORE: ${{ steps.frontend_analysis.outputs.usability_score || '0' }}
          TEAM_SCORE: ${{ steps.team_analysis.outputs.behavior_score }}
          AI_SCORE: ${{ steps.ai_analysis.outputs.ai_score }}
          SONAR_URL: ${{ steps.sonar_analysis.outputs.sonar_url }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_RUN_ID: ${{ github.run_id }}
        run: |
          cd .github/scripts

          # Install dependencies
          npm install --silent @actions/core

          # Run the summary creation script
          node create-job-summary.js
