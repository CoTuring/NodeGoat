name: Code Quality Analysis

on:
  workflow_dispatch:
    inputs:
      enable_sonar:
        description: 'Enable SonarCloud analysis'
        required: false
        default: 'true'
        type: boolean
  # Uncomment to enable automatic runs
  # push:
  #   branches: [ main, master ]
  # pull_request:
  #   branches: [ main, master ]

jobs:
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Detect Language and Setup Environment
      id: detect
      run: |
        # Detect primary language
        if [ -f "package.json" ]; then
          echo "language=javascript" >> $GITHUB_OUTPUT
        elif [ -f "requirements.txt" ] || [ -f "pyproject.toml" ]; then
          echo "language=python" >> $GITHUB_OUTPUT
        elif [ -f "go.mod" ]; then
          echo "language=go" >> $GITHUB_OUTPUT
        elif [ -f "pom.xml" ] || [ -f "build.gradle" ]; then
          echo "language=java" >> $GITHUB_OUTPUT
        else
          echo "language=generic" >> $GITHUB_OUTPUT
        fi

    - name: Setup Node.js (if JS/TS)
      if: steps.detect.outputs.language == 'javascript'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup Python (if Python)
      if: steps.detect.outputs.language == 'python'
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Setup Go (if Go)
      if: steps.detect.outputs.language == 'go'
      uses: actions/setup-go@v4
      with:
        go-version: '1.19'

    - name: Install Dependencies
      run: |
        if [ "${{ steps.detect.outputs.language }}" = "javascript" ] && [ -f "package.json" ]; then
          npm ci || npm install
        elif [ "${{ steps.detect.outputs.language }}" = "python" ] && [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
        elif [ "${{ steps.detect.outputs.language }}" = "go" ] && [ -f "go.mod" ]; then
          go mod download
        fi

    - name: Run SonarCloud Analysis
      if: github.event.inputs.enable_sonar == 'true' || github.event_name != 'workflow_dispatch'
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      continue-on-error: true

    - name: Alternative Code Quality Analysis (ESLint/Pylint)
      id: alt_quality
      run: |
        quality_score=75  # Default score
        
        if [ "${{ steps.detect.outputs.language }}" = "javascript" ]; then
          # Try ESLint
          if [ -f ".eslintrc" ] || [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ]; then
            npx eslint . --format json --output-file eslint-report.json || true
            if [ -f "eslint-report.json" ]; then
              errors=$(jq '[.[] | .errorCount] | add // 0' eslint-report.json)
              warnings=$(jq '[.[] | .warningCount] | add // 0' eslint-report.json)
              total_issues=$((errors + warnings))
              if [ $total_issues -eq 0 ]; then
                quality_score=95
              elif [ $total_issues -lt 10 ]; then
                quality_score=85
              elif [ $total_issues -lt 25 ]; then
                quality_score=75
              else
                quality_score=60
              fi
            fi
          fi
        elif [ "${{ steps.detect.outputs.language }}" = "python" ]; then
          # Try Pylint
          pip install pylint || true
          pylint --output-format=json $(find . -name "*.py" | head -10) > pylint-report.json 2>/dev/null || true
          if [ -f "pylint-report.json" ] && [ -s "pylint-report.json" ]; then
            issues=$(jq 'length' pylint-report.json)
            if [ $issues -eq 0 ]; then
              quality_score=95
            elif [ $issues -lt 5 ]; then
              quality_score=85
            elif [ $issues -lt 15 ]; then
              quality_score=75
            else
              quality_score=60
            fi
          fi
        fi
        
        echo "quality_score=$quality_score" >> $GITHUB_OUTPUT

    - name: Generate Code Quality Score
      run: |
        mkdir -p reports
        quality_score=${{ steps.alt_quality.outputs.quality_score }}
        
        # Try to get SonarCloud score from API (if available)
        # Note: This requires SONAR_TOKEN and project setup
        
        cat > reports/code-quality.json << EOF
        {
          "category": "code_quality",
          "score": $quality_score,
          "max_score": 100,
          "details": {
            "tool": "eslint_pylint_fallback",
            "language": "${{ steps.detect.outputs.language }}"
          }
        }
        EOF

    - name: Upload Code Quality Report
      uses: actions/upload-artifact@v4
      with:
        name: code-quality-report
        path: reports/code-quality.json
