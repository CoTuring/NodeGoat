name: Deploy Reports to GitHub Pages

on:
  workflow_dispatch:
  push:
    branches: [main, master]
    paths:
      - "reports/**"

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Generate Index Page
        run: |
          echo "üîÑ Generating reports index page..."
          cd $GITHUB_WORKSPACE
          node .github/scripts/generate-index.js

          # Verify the index was created
          if [[ -f "reports/index.html" ]]; then
            echo "‚úÖ Index page generated successfully"
            file_size=$(wc -c < "reports/index.html")
            echo "üìä Index page size: $file_size bytes"
          else
            echo "‚ùå Failed to generate index page"
            exit 1
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Prepare Pages Content
        run: |
          echo "üìÅ Preparing content for GitHub Pages..."

          # Create a temporary directory for Pages content
          mkdir -p _site

          # Copy all reports
          if [[ -d "reports" ]]; then
            cp -r reports/* _site/
            echo "‚úÖ Copied reports directory"
          else
            echo "‚ö†Ô∏è No reports directory found, creating empty structure"
            mkdir -p _site
            echo "<h1>No reports available yet</h1>" > _site/index.html
          fi

          # Ensure index.html exists at root
          if [[ -f "_site/index.html" ]]; then
            echo "‚úÖ Index page ready"
          else
            echo "‚ö†Ô∏è No index page found, creating default"
            echo "<h1>Hackathon Reports</h1><p>No reports available yet.</p>" > _site/index.html
          fi

          # List contents for debugging
          echo "üìã Pages content structure:"
          find _site -type f -name "*.html" | head -20

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "./_site"

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Update PR with Pages URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: deployment } = await github.rest.repos.getPages({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const pagesUrl = deployment.html_url;
            const prNumber = context.payload.pull_request.number;

            const comment = `## üìä Hackathon Reports Dashboard

            Your team reports have been updated and are now available at:

            üè† **Main Dashboard:** [${pagesUrl}](${pagesUrl})

            üìã **Team Reports:**
            ${pagesUrl}teams/

            The dashboard includes:
            - üèÜ Overall team rankings and scores
            - üìä Detailed performance metrics
            - üîó Direct links to individual team reports
            - üìà Interactive score visualizations

            *Reports are automatically updated when PRs are created or modified.*`;

            // Check if we already commented
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const existingComment = comments.find(comment => 
              comment.body.includes('Hackathon Reports Dashboard')
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment
              });
            }

      - name: Summary
        run: |
          echo "## üöÄ GitHub Pages Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The hackathon reports dashboard has been deployed to GitHub Pages." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Available Reports" >> $GITHUB_STEP_SUMMARY

          # Count teams and reports
          team_count=0
          report_count=0
          if [[ -d "_site/teams" ]]; then
            team_count=$(find _site/teams -maxdepth 1 -type d | wc -l)
            team_count=$((team_count - 1))  # Subtract 1 for the teams directory itself
            report_count=$(find _site/teams -name "*.html" | wc -l)
          fi

          echo "- **Teams:** $team_count" >> $GITHUB_STEP_SUMMARY
          echo "- **Reports:** $report_count" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó Access Points" >> $GITHUB_STEP_SUMMARY
          echo "- **Main Dashboard:** \`/\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Team Reports:** \`/teams/\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*The dashboard automatically updates when new reports are generated.*" >> $GITHUB_STEP_SUMMARY
