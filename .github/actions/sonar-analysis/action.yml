name: SonarCloud Analysis
description: Run SonarCloud code quality analysis and fetch detailed issues

inputs:
  project_key:
    description: "SonarCloud project key"
    required: true
  organization:
    description: "SonarCloud organization"
    required: true
  language:
    description: "Project programming language"
    required: true
    default: "javascript"
  sonar_token:
    description: "SonarCloud token"
    required: true

outputs:
  analysis_results:
    description: "SonarCloud analysis results with detailed issues"
    value: ${{ steps.sonar-analysis.outputs.analysis_results }}

runs:
  using: "composite"
  steps:
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ github.token }}
        SONAR_TOKEN: ${{ inputs.sonar_token }}

    - name: Wait for analysis completion
      shell: bash
      run: |
        echo "Waiting for SonarCloud analysis to complete..."
        sleep 30

    - name: Fetch detailed SonarCloud issues
      id: sonar-analysis
      shell: bash
      env:
        SONAR_TOKEN: ${{ inputs.sonar_token }}
        PROJECT_KEY: ${{ inputs.project_key }}
        ORGANIZATION: ${{ inputs.organization }}
      run: |
        echo "Fetching SonarCloud analysis results..."

        # Fetch basic metrics
        metrics_response=$(curl -s -u "$SONAR_TOKEN:" \
          "https://sonarcloud.io/api/measures/component?component=$PROJECT_KEY&metricKeys=bugs,vulnerabilities,code_smells,coverage,duplicated_lines_density,ncloc,sqale_rating,reliability_rating,security_rating")

        # Fetch detailed issues - bugs
        bugs_response=$(curl -s -u "$SONAR_TOKEN:" \
          "https://sonarcloud.io/api/issues/search?componentKeys=$PROJECT_KEY&types=BUG&ps=500")

        # Fetch detailed issues - vulnerabilities
        vulnerabilities_response=$(curl -s -u "$SONAR_TOKEN:" \
          "https://sonarcloud.io/api/issues/search?componentKeys=$PROJECT_KEY&types=VULNERABILITY&ps=500")

        # Fetch detailed issues - code smells
        code_smells_response=$(curl -s -u "$SONAR_TOKEN:" \
          "https://sonarcloud.io/api/issues/search?componentKeys=$PROJECT_KEY&types=CODE_SMELL&ps=500")

        # Parse metrics using jq
        bugs_count=$(echo "$metrics_response" | jq -r '.component.measures[] | select(.metric=="bugs") | .value // "0"')
        vulnerabilities_count=$(echo "$metrics_response" | jq -r '.component.measures[] | select(.metric=="vulnerabilities") | .value // "0"')
        code_smells_count=$(echo "$metrics_response" | jq -r '.component.measures[] | select(.metric=="code_smells") | .value // "0"')
        coverage=$(echo "$metrics_response" | jq -r '.component.measures[] | select(.metric=="coverage") | .value // "0"')
        duplicated_lines=$(echo "$metrics_response" | jq -r '.component.measures[] | select(.metric=="duplicated_lines_density") | .value // "0"')
        lines_of_code=$(echo "$metrics_response" | jq -r '.component.measures[] | select(.metric=="ncloc") | .value // "0"')
        maintainability_rating=$(echo "$metrics_response" | jq -r '.component.measures[] | select(.metric=="sqale_rating") | .value // "1"')
        reliability_rating=$(echo "$metrics_response" | jq -r '.component.measures[] | select(.metric=="reliability_rating") | .value // "1"')
        security_rating=$(echo "$metrics_response" | jq -r '.component.measures[] | select(.metric=="security_rating") | .value // "1"')

        # Process detailed issues
        process_issues() {
          local response="$1"
          local issue_type="$2"
          echo "$response" | jq -r --arg type "$issue_type" '
            .issues[] | 
            "- **\($type)**: \(.message)
              - **File**: \(.component | sub(".*:"; ""))
              - **Line**: \(.line // "N/A")
              - **Severity**: \(.severity)
              - **Rule**: \(.rule)
              ---"
          ' 2>/dev/null || echo ""
        }

        # Generate detailed issues output
        detailed_bugs=""
        detailed_vulnerabilities=""
        detailed_code_smells=""

        if [ "$bugs_count" != "0" ]; then
          detailed_bugs=$(process_issues "$bugs_response" "Bug")
        fi

        if [ "$vulnerabilities_count" != "0" ]; then
          detailed_vulnerabilities=$(process_issues "$vulnerabilities_response" "Vulnerability")
        fi

        if [ "$code_smells_count" != "0" ]; then
          detailed_code_smells=$(process_issues "$code_smells_response" "Code Smell")
        fi        # Create comprehensive analysis results (with size limits)
        # Limit detailed issues to prevent GitHub Actions output size limits
        limited_bugs=$(echo "$detailed_bugs" | head -c 2000)
        limited_vulnerabilities=$(echo "$detailed_vulnerabilities" | head -c 2000)
        limited_code_smells=$(echo "$detailed_code_smells" | head -c 3000)
        
        analysis_results=$(cat << EOF
        {
          "summary": {
            "bugs": "$bugs_count",
            "vulnerabilities": "$vulnerabilities_count",
            "code_smells": "$code_smells_count",
            "coverage": "$coverage",
            "duplicated_lines": "$duplicated_lines",
            "lines_of_code": "$lines_of_code",
            "maintainability_rating": "$maintainability_rating",
            "reliability_rating": "$reliability_rating",
            "security_rating": "$security_rating"
          },
          "detailed_issues": {
            "bugs": $(echo "$limited_bugs" | jq -Rs . || echo '""'),
            "vulnerabilities": $(echo "$limited_vulnerabilities" | jq -Rs . || echo '""'),
            "code_smells": $(echo "$limited_code_smells" | jq -Rs . || echo '""')
          }
        }
        EOF
        )

        # Ensure JSON is valid and compact
        analysis_results_escaped=$(echo "$analysis_results" | jq -c . 2>/dev/null || echo '{"summary":{"bugs":"'$bugs_count'","vulnerabilities":"'$vulnerabilities_count'","code_smells":"'$code_smells_count'"},"detailed_issues":{"bugs":"","vulnerabilities":"","code_smells":""}}')
        
        # Check size and truncate if necessary (GitHub Actions has ~1MB limit for outputs)
        result_size=${#analysis_results_escaped}
        if [ $result_size -gt 900000 ]; then
          echo "Warning: Analysis results too large ($result_size bytes), using summary only"
          analysis_results_escaped='{"summary":{"bugs":"'$bugs_count'","vulnerabilities":"'$vulnerabilities_count'","code_smells":"'$code_smells_count'","coverage":"'$coverage'","duplicated_lines":"'$duplicated_lines'","lines_of_code":"'$lines_of_code'","maintainability_rating":"'$maintainability_rating'","reliability_rating":"'$reliability_rating'","security_rating":"'$security_rating'"},"detailed_issues":{"bugs":"Too many issues - check SonarCloud report","vulnerabilities":"Too many issues - check SonarCloud report","code_smells":"Too many issues - check SonarCloud report"}}'
        fi

        echo "analysis_results=$analysis_results_escaped" >> $GITHUB_OUTPUT

        echo "SonarCloud analysis completed successfully!"
        echo "Bugs: $bugs_count"
        echo "Vulnerabilities: $vulnerabilities_count"
        echo "Code Smells: $code_smells_count"
        echo "Coverage: $coverage%"
