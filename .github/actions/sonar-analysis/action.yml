name: SonarCloud Analysis
description: Run SonarCloud code quality analysis and fetch detailed issues

inputs:
  project_key:
    description: "SonarCloud project key"
    required: true
  organization:
    description: "SonarCloud organization"
    required: true
  language:
    description: "Project programming language"
    required: true
    default: "javascript"
  sonar_token:
    description: "SonarCloud token"
    required: true

outputs:
  analysis_results:
    description: "SonarCloud analysis results with detailed issues"
    value: ${{ steps.sonar-analysis.outputs.analysis_results }}

runs:
  using: "composite"
  steps:
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ github.token }}
        SONAR_TOKEN: ${{ inputs.sonar_token }}

    - name: Wait for analysis completion
      shell: bash
      run: |
        echo "Waiting for SonarCloud analysis to complete..."
        sleep 30

    - name: Fetch detailed SonarCloud issues
      id: sonar-analysis
      shell: bash
      env:
        SONAR_TOKEN: ${{ inputs.sonar_token }}
        SONAR_PROJECT_KEY: ${{ inputs.project_key }}
        SONAR_ORGANIZATION: ${{ inputs.organization }}
      run: |
        echo "Fetching SonarCloud analysis results using Node.js script..."

        # Run the Node.js script to fetch detailed SonarCloud data
        cd ${{ github.action_path }}
        node fetch-sonar-details.js > sonar_output.txt 2>&1

        # Extract the JSON from the output between the heredoc markers
        analysis_results=$(grep -A 1000 "SONAR_ANALYSIS_RESULTS<<EOF" sonar_output.txt | grep -B 1000 "^EOF$" | sed '1d;$d' | tr -d '\n')

        # Validate JSON
        if echo "$analysis_results" | jq . > /dev/null 2>&1; then
          echo "✅ Valid JSON output received"
          
          # Extract summary info for logging
          bugs_count=$(echo "$analysis_results" | jq -r '.summary.bugs // "0"')
          vulnerabilities_count=$(echo "$analysis_results" | jq -r '.summary.vulnerabilities // "0"')
          code_smells_count=$(echo "$analysis_results" | jq -r '.summary.code_smells // "0"')
          coverage=$(echo "$analysis_results" | jq -r '.summary.coverage // "0"')
          
          echo "SonarCloud analysis completed successfully!"
          echo "Bugs: $bugs_count"
          echo "Vulnerabilities: $vulnerabilities_count"
          echo "Code Smells: $code_smells_count"
          echo "Coverage: $coverage%"
        else
          echo "❌ Invalid JSON output, using fallback"
          analysis_results='{"summary":{"bugs":"0","vulnerabilities":"0","code_smells":"0","coverage":"0","quality_gate_status":"ERROR"},"detailed_issues":{"bugs":"Error fetching data","vulnerabilities":"Error fetching data","code_smells":"Error fetching data"},"total_issues":0,"error":"JSON parsing failed"}'
        fi

        # Set the output for the next action
        echo "analysis_results=$analysis_results" >> $GITHUB_OUTPUT

        # Show the script output for debugging
        echo "Script output:"
        cat sonar_output.txt
