name: "Post Results Comment"
description: "Post formatted results comment on PR"

inputs:
  overall_score:
    description: "Overall score"
    required: true
  test_score:
    description: "Test score"
    required: true
  sonar_score:
    description: "SonarCloud score"
    required: true
  sonar_url:
    description: "SonarCloud URL"
    required: true
  security_score:
    description: "Security score"
    required: true
  frontend_score:
    description: "Frontend score"
    required: true
  team_score:
    description: "Team score"
    required: true
  ai_score:
    description: "AI score"
    required: true
  detected_stack:
    description: "Detected technology stack"
    required: true
  pr_number:
    description: "PR number"
    required: true
  team_name:
    description: "Team name"
    required: true
  high_severity:
    description: "Number of high severity security vulnerabilities"
    required: false
    default: "0"
  medium_severity:
    description: "Number of medium severity security vulnerabilities"
    required: false
    default: "0"
  low_severity:
    description: "Number of low severity security vulnerabilities"
    required: false
    default: "0"
  coverage_percentage:
    description: "Test coverage percentage"
    required: false
    default: "0"
  test_files:
    description: "Number of test files"
    required: false
    default: "0"
  sonar_status:
    description: "SonarCloud quality gate status"
    required: false
    default: "UNKNOWN"
  code_smells:
    description: "Number of code smells"
    required: false
    default: "0"
  bugs:
    description: "Number of bugs"
    required: false
    default: "0"
  vulnerabilities:
    description: "Number of vulnerabilities from SonarCloud"
    required: false
    default: "0"

runs:
  using: "composite"
  steps:
    - name: 📥 Download Analysis Artifacts
      uses: actions/download-artifact@v4
      with:
        name: hackathon-analysis-${{ inputs.team_name }}-pr${{ inputs.pr_number }}
        path: ./analysis-results/

    - name: 💬 Post Analysis Results
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');

          const overall_score = parseInt('${{ inputs.overall_score }}');
          const test_score = parseInt('${{ inputs.test_score }}');
          const sonar_score = parseInt('${{ inputs.sonar_score }}');
          const security_score = parseInt('${{ inputs.security_score }}');
          const frontend_score = parseInt('${{ inputs.frontend_score }}');
          const team_score = parseInt('${{ inputs.team_score }}');
          const ai_score = parseInt('${{ inputs.ai_score }}');

          // Parse basic analysis data
          const high_severity = parseInt('${{ inputs.high_severity }}');
          const medium_severity = parseInt('${{ inputs.medium_severity }}');
          const low_severity = parseInt('${{ inputs.low_severity }}');
          const coverage_percentage = parseFloat('${{ inputs.coverage_percentage }}');
          const test_files = parseInt('${{ inputs.test_files }}');
          const sonar_status = '${{ inputs.sonar_status }}';
          const code_smells = parseInt('${{ inputs.code_smells }}');
          const bugs = parseInt('${{ inputs.bugs }}');
          const vulnerabilities = parseInt('${{ inputs.vulnerabilities }}');
          const total_vulnerabilities = high_severity + medium_severity + low_severity;

          // Function to safely read JSON files
          function readJsonFile(filePath) {
            try {
              if (fs.existsSync(filePath)) {
                const content = fs.readFileSync(filePath, 'utf8');
                return JSON.parse(content);
              }
            } catch (error) {
              console.log(`Could not read ${filePath}: ${error.message}`);
            }
            return null;
          }

          // Function to format JSON for display
          function formatJsonForComment(obj, title) {
            if (!obj) return '';
            
            const jsonString = JSON.stringify(obj, null, 2);
            return `**${title}:**\n\`\`\`json\n${jsonString}\n\`\`\`\n`;
          }

          // Read analysis artifacts
          const sonarData = readJsonFile('./analysis-results/sonar-measures.json');
          const trivyData = readJsonFile('./analysis-results/trivy-results.json');
          const coverageData = readJsonFile('./analysis-results/coverage-summary.json');

          // Extract meaningful data from artifacts
          let securityIssuesText = '';
          let qualityIssuesText = '';
          let coverageDetailsText = '';

          // Process Trivy security results
          if (trivyData && trivyData.Results) {
            securityIssuesText = formatJsonForComment(trivyData, 'Security Scan Results (Trivy)');
          }

          // Process SonarCloud quality results  
          if (sonarData && sonarData.measures) {
            qualityIssuesText = formatJsonForComment(sonarData, 'Code Quality Analysis (SonarCloud)');
          }

          // Process coverage results
          if (coverageData) {
            coverageDetailsText = formatJsonForComment(coverageData, 'Test Coverage Details');
          }

          // Helper function to create progress bar
          function createProgressBar(score) {
            const filledBlocks = Math.floor(score / 10);
            const emptyBlocks = 10 - filledBlocks;
            return '█'.repeat(filledBlocks) + '░'.repeat(emptyBlocks);
          }

          // Helper function to get grade emoji
          function getGradeEmoji(score) {
            if (score >= 90) return '🏆';
            if (score >= 80) return '🥇';
            if (score >= 70) return '🥈';
            if (score >= 60) return '🥉';
            return '🔧';
          }

          // Helper function to get status emoji
          function getStatusEmoji(score) {
            if (score >= 80) return '✅';
            if (score >= 60) return '⚠️';
            return '❌';
          }

          const comment = [
            '## 🏆 Hackathon Analysis Results',
            '',
            '**Team:** ${{ inputs.team_name }}',
            '**Technology Stack:** ${{ inputs.detected_stack }}',
            '**Overall Score:** ' + getGradeEmoji(overall_score) + ' **' + overall_score + '/100**',
            '',
            '### 📊 Detailed Breakdown',
            '',
            '| Category | Score | Progress | Weight |',
            '|----------|-------|----------|---------|',
            '| ' + getStatusEmoji(test_score) + ' **Tests & Coverage** | ' + test_score + '/100 | `' + createProgressBar(test_score) + '` | 25% |',
            '| ' + getStatusEmoji(sonar_score) + ' **Code Quality** | ' + sonar_score + '/100 | `' + createProgressBar(sonar_score) + '` | 30% |',
            '| ' + getStatusEmoji(security_score) + ' **Security** | ' + security_score + '/100 | `' + createProgressBar(security_score) + '` | 20% |',
            '| ' + getStatusEmoji(frontend_score) + ' **Frontend UX** | ' + frontend_score + '/100 | `' + createProgressBar(frontend_score) + '` | 10% |',
            '| ' + getStatusEmoji(team_score) + ' **Team Collaboration** | ' + team_score + '/100 | `' + createProgressBar(team_score) + '` | 10% |',
            '| ' + getStatusEmoji(ai_score) + ' **AI Attribution** | ' + ai_score + '/100 | `' + createProgressBar(ai_score) + '` | 5% |',
            '',
            '### 🔍 Analysis Links',
            '- 🔗 **[SonarCloud Report](${{ inputs.sonar_url }})** - Detailed code quality analysis',
            '- 📊 **[Full Analysis Logs](https://github.com/' + context.repo.owner + '/' + context.repo.repo + '/actions/runs/' + context.runId + ')** - Complete CI results',
            '',
            '### 🔒 Security Analysis'
          ];

          // Show Trivy security scan results from JSON artifact
          if (securityIssuesText) {
            comment.push(securityIssuesText);
          } else {
            // Fallback to basic summary
            if (total_vulnerabilities > 0) {
              comment.push('**Summary:** ' + high_severity + ' High | ' + medium_severity + ' Medium | ' + low_severity + ' Low severity issues');
            } else {
              comment.push('✅ **No security vulnerabilities detected!**');
            }
            comment.push('');
          }

          comment.push('### 🧪 Test Coverage Analysis');

          // Show coverage details from JSON artifact
          if (coverageDetailsText) {
            comment.push(coverageDetailsText);
          } else {
            // Fallback to basic summary
            if (test_files > 0) {
              comment.push('**Coverage:** ' + coverage_percentage.toFixed(1) + '% | **Test Files:** ' + test_files);
            } else {
              comment.push('⚠️ **No test files found** - Add automated testing to improve code reliability.');
            }
            comment.push('');
          }

          comment.push('### 🔧 Code Quality Analysis');

          // Show SonarCloud analysis from JSON artifact
          if (qualityIssuesText) {
            comment.push(qualityIssuesText);
          } else {
            // Fallback to basic summary
            if (sonar_status !== 'UNKNOWN') {
              const gateStatus = sonar_status === 'FAILED' ? '❌ FAILED' : '✅ PASSED';
              comment.push('**Quality Gate:** ' + gateStatus);
              comment.push('**Issues Found:** ' + bugs + ' Bugs | ' + code_smells + ' Code Smells | ' + vulnerabilities + ' Vulnerabilities');
            } else {
              comment.push('⏳ **SonarCloud analysis pending or unavailable.**');
            }
            comment.push('');
          }

          comment.push('### 🎯 Priority Action Items');
          comment.push('');

          // Generate action items based on findings
          if (total_vulnerabilities > 0) {
            comment.push('**🔒 Security:** Fix ' + total_vulnerabilities + ' vulnerabilities (' + high_severity + ' high, ' + medium_severity + ' medium, ' + low_severity + ' low)');
          }

          if (test_files === 0) {
            comment.push('**🧪 Testing:** Create test files and achieve basic test coverage');
          } else if (coverage_percentage < 80) {
            comment.push('**🧪 Testing:** Increase coverage from ' + coverage_percentage.toFixed(1) + '% to 80%+');
          }

          if (bugs > 0 || code_smells > 5 || sonar_status === 'FAILED') {
            comment.push('**🔧 Code Quality:** Address ' + bugs + ' bugs and ' + code_smells + ' code smells');
          }

          if (overall_score >= 85) {
            comment.push('🏆 **Excellent work!** Your code meets high standards.');
          }

          comment.push('');
          comment.push('---');
          comment.push('');
          comment.push('*🤖 Analysis completed on ' + new Date().toISOString().split('T')[0] + ' | PR #${{ inputs.pr_number }} | Powered by GitHub Actions*');

          const finalComment = comment.join('\n');

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: finalComment
          });
